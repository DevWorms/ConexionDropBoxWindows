<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="metroTabPageAccount.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        VRaOHRp0PfN/HbZqdDJlQYwAAAAASUVORK5CYII=
</value>
  </data>
</root>